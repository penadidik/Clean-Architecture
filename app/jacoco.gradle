apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.5"
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn(
            ":app:testDevelopDebugUnitTest"
//            ":presentation:createDevelopDebugCoverageReport"
    )
    reports {
        csv.enabled = false
        xml.enabled = true
        html {
            enabled = true
            destination(file("${buildDir}/coverage-report"))
        }
    }

    def fileFilter = [
            '**/*App.*',
            '**/*Application.*',
            '**/*Activity.*',
            '**/*Fragment.*',
            '**/*Adapter.*',
            '**/*JsonAdapter.*', // adapters generated by Moshi
            '**/di/**',
            '**/extension/**',
            '**/util/**',
            '**/*Dagger.*',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/*_*Factory.class',
            '**/*ComponentImpl.class',
            '**/*SubComponentBuilder.class'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/developDebug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDevelopDebugUnitTest.exec",
            "outputs/code-coverage/developDebugAndroidTest/connected/*coverage.ec"
    ]))
}

project.tasks.whenTaskAdded {
    if (it.name == "testProductionReleaseUnitTest") {
        it.enabled = false
    }
}